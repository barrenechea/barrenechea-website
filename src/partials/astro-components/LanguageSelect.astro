---
import { AppConfig } from '~/config';
import { type LanguageKey, languages } from '~/i18n/translations';

/**
 * Returns the localized pathname for a given locale.
 */
function localizedPathname(locale: string): string {
  const currentUrl = Astro.url;
  const newPathname = currentUrl.pathname.split('/').slice(2).join('/');
  return `/${locale}/${newPathname}`;
}

const { lang = AppConfig.defaultLang } = Astro.params;

const currentLanguage = languages[lang as LanguageKey] ?? languages[AppConfig.defaultLang];
---

<language-selector class="flex justify-center">
  <button
    id="language-toggle"
    type="button"
    class="inline-flex cursor-pointer items-center justify-center rounded-lg p-2 text-sm font-medium text-white hover:bg-zinc-800 sm:px-4"
  >
    <svg
      class="me-3 size-5 rounded-full"
      aria-hidden="true"
      viewBox="0 0 512 512"
      set:html={currentLanguage.icon.body}
    />
    {currentLanguage.label}
  </button>
  <div
    class="absolute z-50 mt-11 hidden list-none divide-y divide-zinc-100 rounded-lg bg-white text-base shadow dark:bg-zinc-800"
    id="language-dropdown-menu"
  >
    <ul class="py-2 font-medium" role="none">
      {
        Object.keys(languages).map((language) => (
          <li>
            <a
              href={localizedPathname(language)}
              class="block px-4 py-2 text-sm text-zinc-700 hover:bg-zinc-100 dark:text-zinc-400 dark:hover:bg-zinc-600 dark:hover:text-white"
              role="menuitem"
            >
              <div class="inline-flex items-center">
                <svg
                  aria-hidden="true"
                  class="me-2 size-3.5 rounded-full"
                  viewBox="0 0 512 512"
                  set:html={languages[language as LanguageKey].icon.body}
                />
                {languages[language as LanguageKey].label}
              </div>
            </a>
          </li>
        ))
      }
    </ul>
  </div>
</language-selector>

<script>
  class LanguageSelector extends HTMLElement {
    toggleButton: Element | null;
    dropdownMenu: Element | null;
    boundClickListener: (event: MouseEvent) => void;

    constructor() {
      super();
      this.toggleButton = this.querySelector('#language-toggle');
      this.dropdownMenu = this.querySelector('#language-dropdown-menu');

      this.toggleButton?.addEventListener('click', (event) => {
        this.dropdownMenu?.classList.toggle('hidden');
        event.stopPropagation(); // Prevent the document click handler from running
      });

      this.boundClickListener = this.handleDocumentClick.bind(this);
    }

    connectedCallback() {
      // Add event listener when the element is added to the document
      document.addEventListener('click', this.boundClickListener);
    }

    disconnectedCallback() {
      // Remove event listener when the element is removed from the document
      document.removeEventListener('click', this.boundClickListener);
    }

    handleDocumentClick(event: MouseEvent) {
      // Check if the click is outside the toggleButton
      if (event.target && !this.contains(event.target as Node)) {
        this.dropdownMenu?.classList.add('hidden');
      }
    }
  }

  customElements.define('language-selector', LanguageSelector);
</script>
